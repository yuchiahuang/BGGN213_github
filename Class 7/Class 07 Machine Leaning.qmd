---
title: "Class 7: Machine Learning 1"
author: "Yu-Chia Huang (PID: A59026739)"
format: pdf
---

#Clustering

We will star with k-means clustering, one of the most prevelent of all clustering methods.

To get started let's make some data up:
```{r}
hist(rnorm(100000, mean = 3))
```

```{r}
tmp <- c( rnorm(30,3), rnorm(30, -3))
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```

The main function in R for k-means clustering is called `kmeans()`.

```{r}
k <- kmeans(x, centers=2, nstart=20)
k
```

> Q1. How many points are in each cluster?

```{r}
k$size
```

> Q2. The clustering result i.e. membership vector?
Q. What ‘component’ of your result object details
- cluster size?
- cluster assignment/membership?
- cluster center?

```{r}
k$cluster
```

> Q3. Cluster centers

```{r}
k$centers
```

> Q4. Make a plot of our data colored by clustering results with optionally the cluster centers shown.

```{r}
plot(x, col=k$cluster, pch=16)
points(k$centers, col="blue", pch=15, cex=2)
```

> Q5. Run kmeans again but cluster into 3 and plot the results like we did above.

```{r}
k3 <- kmeans(x, centers=3, nstart=20)

plot(x, col=k3$cluster, pch=16)
points(k3$centers, col="blue", pch=15, cex=2)
```

# Hierarchical Clustering

Hierarchical clustering it has an advantage in that it can reveal the structure in your data rather than imposing a structure as k-means will.

The main function in "base" R is called `hclust()`.

It requires a distance matrix as input, not the raw data itself.

```{r}
dist(x)
```


```{r}
hc <- hclust(dist(x))
hc
```

```{r}
plot(hc)
abline(h=8, col="red")
```

The function to get our clusters/groups from a hclust abject is claaed `cutree()`.

```{r}
grps <- cutree(hc, h=8)
grps
```

> Q. Plot our hclust results in terms of our data colored by cluster membership.

```{r}
plot(x, col=grps)
```

# Principal Component Analysis (PCA)
## One of the most useful tools (!?)

#We will work on data from the strange stuff folks there eat. It has 17 different foods for 4 countries.

#Load the data.

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
```

> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?
#We can use `nrow()`, `ncol()`, or `dim()` functions.

```{r}
dim(x) #Return the row number and column number.
```

> Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

#We can do it like this below:
```{r}
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```
#Or this:
```{r}
x<- read.csv(url, row.names = 1)
head(x)
```

#Preview the first 6 rows. (We can use `view()`, `head()`, and `tail()` functions.)

```{r}
head(x,6)
```

#Use the `barplot` function.

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```

> Q3: Changing what optional argument in the above barplot() function results in the following plot?

#When looking for `?barplot`, the document shows that
beside	
a logical value. If FALSE, the columns of height are portrayed as stacked bars, and if TRUE the columns are portrayed as juxtaposed bars.
(The default seems to be FALSE?)

```{r}
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```

> Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

```{r}
pairs(x, col=rainbow(10), pch=16)
```

>Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

When we look at the right plots of N. Ireland,we can draw a diagonal in each plot. The blue dots is far from the diagonal, which is the main difference.

#PCA to the rescue

Help me make sense of this data...
The main function for PCA in base R is called `prcomp()`.

It wants the transpose (with the `t()`) of our food data for analysis.

```{r}
pca <- prcomp(t(x))
summary(pca) #Give SD, proportion of variance and cumulative proportion.
```

One of the main results that folks look for is called the "score plot" a.k.a. PC plot, PC1 vs PC2 plot...

>Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

```{r}
plot(pca$x[,1], pca$x[,2])
abline(h=0, col="gray", lty=2)
abline(v=0, col="gray", lty=2)
```
```{r}
# Plot PC1 vs PC2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
```

>Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x), col = c("red", "orange", "blue", "green"))
```

Standard deviation:

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v
```

```{r}
## or the second row here...
z <- summary(pca)
z$importance
```

```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")
```

```{r}
## Lets focus on PC1 as it accounts for > 90% of variance 
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```

>Q9: Generate a similar ‘loadings plot’ for PC2. What two food groups feature prominantely and what does PC2 maninly tell us about?

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
```

##Using ggplot for these figures

```{r}
library(ggplot2)

df <- as.data.frame(pca$x)
df_lab <- tibble::rownames_to_column(df, "Country")

# Our first basic plot
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country) + 
  geom_point()
```

To change the appearance:

```{r}
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country, label=Country) + 
  geom_hline(yintercept = 0, col="gray") +
  geom_vline(xintercept = 0, col="gray") +
  geom_point(show.legend = FALSE) +
  geom_label(hjust=1, nudge_x = -10, show.legend = FALSE) +
  expand_limits(x = c(-300,500)) +
  xlab("PC1 (67.4%)") +
  ylab("PC2 (28%)") +
  theme_bw()
```

To load figures using `pca$rotation`
Which do you prefer, base graphics or ggplot?

```{r}
ld <- as.data.frame(pca$rotation)
ld_lab <- tibble::rownames_to_column(ld, "Food")

ggplot(ld_lab) +
  aes(PC1, Food) +
  geom_col()
```

To add some additional features:

```{r}
ggplot(ld_lab) +
  aes(PC1, reorder(Food, PC1), bg=PC1) +
  geom_col() + 
  xlab("PC1 Loadings/Contributions") +
  ylab("Food Group") +
  scale_fill_gradient2(low="purple", mid="gray", high="darkgreen", guide=NULL) +
  theme_bw()
```

Biplots

```{r}
## The inbuilt biplot() can be useful for small datasets 
biplot(pca)
```

##2. PCA of RNA-seq data

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

> Q10: How many genes and samples are in this data set?

```{r}
nrow(rna.data)
ncol(rna.data)
```

There are 100 genes and 10 samples in this data set.
