---
title: "Class 13: RNASeq analysis with DESeq2"
author: "Yu-Chia Huang (PID: A59026739)"
format: pdf
---

>The data for this hands-on session comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

```{r}
#install.packages("BiocManager")
#BiocManager::install("DESeq2")
```

```{r}
#| message: false
#| warning: false
library(DESeq2)
```

## Data import

```{r}
#Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names = 1)
metadata <- read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```

>Q1. How many genes are in this dataset?

38694 genes.

```{r}
nrow(counts)
```

>Q2. How many ‘control’ cell lines do we have?

There are 4 controls.

```{r}
sum(metadata$dex=="control")
```

```{r}
table(metadata$dex)
```

```{r}
metadata
```

```{r}
head(counts)
```

I want to compare the control to the treated columns. To do this I will

- Step 1. Identify and extract the "control" columns.
- Step 2. Calculate the mean value per gene fro all these "control" columns and save as `control.mean`.
- Step 3. Do the same for treated
- Step 4. Compare the `control.mean ` and ` treated.mean` values.

>Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

Step 1:
```{r}
control.inds <- metadata$dex=="control"
```

```{r}
control.mean <- rowMeans(counts[,control.inds])
head(control.mean)
```

>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called `treated.mean`)

To calculate the treated group.

```{r}
treated.mean <- rowMeans(counts[,metadata$dex=="treated"])
head(treated.mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

Let's see what these count values look like...

```{r}
plot(meancounts)
```

>Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 
 
 Use geom_point.


```{r}
library(ggplot2)
```

```{r}
ggplot(meancounts) +
  aes(control.mean, treated.mean) +
  geom_point(alpha=0.2)
```

>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

log	.

a character string which contains "x" if the x axis is to be logarithmic, "y" if the y axis is to be logarithmic and "xy" or "yx" if both axes are to be logarithmic.

```{r}
plot(meancounts, log="xy")
```

Logs are super useful when we have such skewed data

```{r}
# Treated / control
# log2(10/10) = 0
# log2(5/10) = -1
```

```{r}
log2(20/10)
```

Add log2(Fold-change) values to our wee results table.

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/
                            meancounts$control.mean)
head(meancounts)
```

I need to exclude any genes with zero counts as we can't say anything about them anyway form this experiment and it causes me math pain.

```{r}
# What values in the first two cols are zero
# to remove
to.rm.inds <- rowSums(meancounts[,1:2] == 0) > 0
mycounts <- meancounts[!to.rm.inds,]
head(mycounts)
```

```{r}
c(TRUE, FALSE, TRUE)
-c(TRUE, FALSE, TRUE)
!c(TRUE, FALSE, TRUE)
# Tell the elements that are TRUE
which(c(TRUE, FALSE, TRUE))
```

Another method:

```{r}
#zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)
#to.rm <- unique(zero.vals[,1])
#mycounts <- meancounts[-to.rm,]
#head(mycounts)
```

>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

arr.ind
logical; should array indices be returned when x is an array? Anything other than a single true value is treated as false.

unique() to prevent repetitive reports of both row and column == 0.

>Q. How many genes do I have left?

```{r}
nrow(mycounts)
```

>Q. How many genes are "up-regulated" i.e. have a log2(fold-change greater than +2?

```{r}
sum(mycounts$log2fc > +2)
```

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

```{r}
sum(up.ind)
```

>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(down.ind)
```

367.

>Q. How many genes are "down-regulated" i.e. have a log2(fold-change less than -2?

```{r}
sum(mycounts$log2fc < -2)
```

>Q10. Do you trust these results? Why or why not?

We have to consider the statistical difference via p-value or p adjust.

## Running DESeq

Like many bioconductor analysis packages DESeq wants it's inpit in a very particular way.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design =~ dex)
```

To run DESeq analysis we call the main function from the packages called `DESeq(dds)`.

```{r}
dds <- DESeq(dds)
```

To get the results out of this `dds` object we can use the DESeq `results()` function.

```{r}
res <- results(dds)
head(res)
```

? To be more stringent. "padj"

```{r}
-log2(0.05)
```


A common summary visualization is called a Volcano plot.

```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab="Log2 Fold-Change",
     ylab="-log P-value")
#vertical
abline(v=c(-2,2), col="red")
#horizontal
abline(h=-log2(0.05), col="blue")
```

```{r}
mycols <- rep("gray", nrow(res))
mycols[abs(res$log2FoldChange) > 2] <- "black"
mycols[res$pvalue > 0.05] <- "gray"
```

```{r}
plot(res$log2FoldChange, -log(res$padj), col=mycols,
     xlab="Log2 Fold-Change",
     ylab="-log P-value")
#vertical
abline(v=c(-2,2), col="red")
#horizontal
abline(h=-log2(0.05), col="blue")
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
BiocManager::install("EnhancedVolcano")
```

```{r}
library(EnhancedVolcano)
library(ggrepel)
```

```{r}
#x <- as.data.frame(res)

#EnhancedVolcano(x,lab = x$symbol,x = 'log2FoldChange',y = 'pvalue')
```

# Save our results to date

```{r}
write.csv(res, file="myresults.csv")
```

## Adding annotation data

We need to translate or "map" our ensemble IDs into more understandable gene names and the identifiers that other useful databases use.

```{r}
#BiocManager::install("AnnotationDbi")
```

```{r}
#BiocManager::install("org.Hs.eg.db")
```


```{r}
library(AnnotationDbi)
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called `res$entrez`, `res$uniprot` and `res$genename`.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="ENTREZID",     # The new format we want to add
                     multiVals="first")
```

```{r}
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="UNIPROT",     # The new format we want to add
                     multiVals="first")
```

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="GENENAME",     # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

```{r}
# Run in your R console (i.e. not your Rmarkdown doc!)
#BiocManager::install( c("pathview", "gage", "gageData") )
```

```{r}
library(pathview)
library(gage)
library(gageData)
```

```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

$`hsa00232 Caffeine metabolism`
#ENTREZID
[1] "10"   "1544" "1548" "1549" "1553" "7498" "9"

More easily to hit $`hsa00983 Drug metabolism - other enzymes`
Because there are more genes in it
Calibration

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```
 ENTREZID

Run gage:

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

To look at the pathway of hsa05310 Asthma

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)

